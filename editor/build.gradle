import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

apply plugin: 'java'
apply plugin: 'idea'
sourceCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
    jcenter()
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
    }
}
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'

    compile 'com.google.guava:guava:16.0.1'
    compile 'com.google.code.gson:gson:2.3.1'

    compile "com.badlogicgames.gdx:gdx:${GDX_VERSION}"
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:${GDX_VERSION}"
    compile "com.badlogicgames.gdx:gdx-platform:${GDX_VERSION}:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-box2d-platform:${GDX_VERSION}:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-platform:${GDX_VERSION}:natives-desktop"
    compile 'net.lingala.zip4j:zip4j:1.3.2'


    compile 'com.suiton2d:suiton-core:0.1.1'
    compile project(':avocado')
}

apply plugin: 'eu.appsatori.fatjar'

fatJar {
    manifest {
        attributes 'Main-Class': 'Main'
    }
}

task fixDesktop(type: Copy) {
    def desktopDir = project(":desktop").projectDir
    def destDirectory = projectDir.absolutePath + "/src/main/resources/client"
    new File(destDirectory).mkdirs()
    zipIt(desktopDir, destDirectory + "/desktop.zip")
}

task unfix(type: Delete) {
    delete(project(":editor").projectDir.absolutePath + "/src/main/resources/client")
}


def zipIt(src, dest) {
    File topDir = new File((String)src)
    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream((String)dest))
    int topDirLength = topDir.absolutePath.length()

    topDir.eachFileRecurse { file ->
        def relative = file.absolutePath.substring(topDirLength).replace('\\', '/')
        if (file.isDirectory() && !relative.endsWith('/')) {
            relative += '/'
        }

        ZipEntry entry = new ZipEntry(relative)
        entry.time = file.lastModified()
        zos.putNextEntry(entry)
        if (file.isFile()) {
            zos << new FileInputStream(file)
        }
    }
    zos.close()
}

build.dependsOn fixDesktop
jar.dependsOn fixDesktop
fatJar.dependsOn fixDesktop
clean.dependsOn unfix